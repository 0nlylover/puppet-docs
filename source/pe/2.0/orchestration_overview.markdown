---
layout: pe2experimental
title: "PE 2.0 » Orchestration » Overview"
---

Orchestration for New PE Users: Overview
=====

What is Orchestration?
-----

Orchestration means invoking actions in parallel across any number of nodes at once. This introduces the

PE's orchestration features are built on the MCollective framework, which consists of the following components: 

* **Client interfaces** can issue orchestration commands to some or all of your nodes. The console's live management tools are one client interface, and the `mco` command line tool is another. 
* **Orchestration agents** <!-- TODO: decide whether we want to expose "agent" --> are plugins that live on agent nodes and provide orchestration actions.
* The **MCollective service** runs on every agent node and listens for orchestration commands. If a command is legit, relevant to the node, and for a supported action, the service will trigger the action and send back results.
* The **message broker** is a central server that routes orchestration messages between client interfaces and nodes running the MCollective service. (PE's ActiveMQ message server runs on the puppet master node.)

### Orchestration isn't SSH

Orchestration isn't for running arbitrary code on nodes. Instead, each node has a collection of **actions** available. Actions are distributed in plugins, and you can extend PE's orchestration features by downloading or writing new orchestration agents and distributing them with Puppet. 

### Live Management is Orchestration

The console's live management page offers
a convenient graphical interface for orchestration tasks, such as
browsing and cloning resources across nodes. See [the live management chapters of this user's guide](./console_live.html) for more details.

### Orchestration is Also Scriptable

In addition to live management's interactive interface, PE includes command-line tools
that let you script and automate orchestration tasks (or just run them from the comfort of your terminal). 

Changes Since PE 1.2
-----

PE's orchestration features have been changed and improved since they were introduced in version 1.2. 

* Orchestration is enabled by default for all PE nodes. 
* Orchestration tasks can now be invoked directly from the console, with the "advanced tasks" tab of the live management page. PE's orchestration framework also powers the other live management features.
* The `mco` user account on the puppet master is gone, in favor of a new `peadmin` user. This user can still invoke orchestration tasks across your nodes, but it will also gain more general purpose capabilities in future versions.
* PE now includes the `puppetral` plugin, which lets you use Puppet's Resource Abstraction Layer (RAL) in orchestration tasks.
* For performance reasons, the default message security scheme has changed from AES to PSK.
* The network connection over which messages are sent is now encrypted using SSL.

Security and Communications
-----

All network traffic generated by PE 2.0 s orchestration
capabilities is **encrypted** using SSL without host verification. In
addition, all orchestration messages are **authenticated** using a
Pre-Shared Key (PSK). Message security schemes other than PSK, such
as AES, can be configured, though there may be performance
considerations in doing so. The combination of PSK and SSL provides
both authentication and encryption.

### How Can the Password be Changed?

The password used to authenticate orchestration messages is
randomly generated during installation and is stored in
`/etc/puppetlabs/mcollective/credentials` on the puppet master server. The password can be changed by editing
the contents of this file. For the password change to take effect,
puppet agent must run once on the puppet master, then run once on every other agent node. The password change can be
verified by checking node reports in the console.

### What Ports Must be Opened in the Firewall?

Nodes send orchestration messages over TCP port 61613
to the ActiveMQ server, which PE 2.0 installs on the
same machine as the puppet master. See the [notes on firewall configuration in the "Preparing to Install" chapter of this guide](./install_preparing.html#firewall-configuration) for more details about PE's network traffic.

