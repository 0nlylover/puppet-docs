---
layout: default
title: Learning — Variables, Conditionals, and Facts
---

Learning — Variables, Conditionals, and Facts
=============================================

You understand how to write manifests and order resources; now read system info with facts and let your resources learn from their environment with variables and conditionals.

* * *

&larr; [Ordering](./ordering.html) --- [Index](./) --- TBA &rarr;

* * * 

[customfacts]: http://docs.puppetlabs.com/guides/custom_facts.html

True Facts
----------

So, say you needed to set the contents of a configuration file based on the IP address and hostname of the system. Or maybe you know what package you need to install, but its name is different depending on whether you're running Debian or Red Hat. _Man,_ it'd be great if we could somehow get ahold of some system information _before_ we started compiling our manifests; if only there was some way! Yeah, okay, I'll stop. Put that down. Easy. 

Anyway, Puppet ships with a tool called Facter, which ferrets out your system information and returns it in a normalized format. The compiler has access to all of those facts when it's reading a manifest, and you can use them wherever you want. 

Before we get into how to use facts, it's worth taking a second to find out what they are. So at the command line, just run: 

    $ facter

Pretty basic: You'll get back a long list of key/value pairs separated by the familiar `=>` hash rocket. If you want the value of a single fact, you can give facter its name as an argument: 

    $ facter hostname
    puppet

Variables
---------

Puppet exposes everything it gets from Facter as global variables.

In Puppet, all `$variables` start with a dollar sign. They can be referenced bare or in double-quoted strings, but not in single-quoted strings. To distinguish a `${variable}` from the surrounding text, you can optionally wrap its name in curly braces.

So let's get our `/etc/hosts` file in order without bothering to look up our actual IP address! Memorizing long strings of digits is so last century.

    # hosts-simple.pp
    
    host {'self':
      ensure => present,
      name => $hostname,
      ip => $ipaddress,
    }
    
    # puppet apply hosts-simple.pp
    
    notice: /Stage[main]//Host[puppet]/ensure: created
    
    # cat /etc/hosts
    # HEADER: This file was autogenerated at Mon Apr 25 14:39:11 -0700 2011
    # HEADER: by puppet.  While it can still be managed manually, it
    # HEADER: is definitely not recommended.
    # Do not remove the following line, or various programs
    # that require network functionality will fail.
    127.0.0.1	localhost.localdomain	localhost
    ::1	localhost6.localdomain6	localhost6
    172.16.158.137	puppet

So that's bare variables under control. Now to compose a string from variables: 

    file {'motd':
      ensure => file,
      path => '/etc/motd',
      mode => 0644,
      content => "Welcome to ${hostname}, a ${operatingsystem} island in the sea of ${domain}.",
    } 

Fairly simple, either way. 

### An Aside: Scope and Namespaces

Without going into too much detail, I want to mention that current versions of Puppet 