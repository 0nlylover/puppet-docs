zone

Solaris zones.

### Parameters

#### autoboot

Whether the zone should automatically boot. Valid values are
`true`, `false`.

#### create\_args

Arguments to the zonecfg create command. This can be used to create
branded zones.

#### ensure

The running state of the zone. The valid states directly reflect
the states that `zoneadm` provides. The states are linear, in that
a zone must be `configured` then `installed`, and only then can be
`running`. Note also that `halt` is currently used to stop zones.

#### id

The numerical ID of the zone. This number is autogenerated and
cannot be changed.

#### inherit

The list of directories that the zone inherits from the global
zone. All directories must be fully qualified.

#### install\_args

Arguments to the zoneadm install command. This can be used to
create branded zones.

#### ip

The IP address of the zone. IP addresses must be specified with the
interface, separated by a colon, e.g.: bge0:192.168.0.1. For
multiple interfaces, specify them in an array.

#### name

-   **namevar**

The name of the zone.

#### path

The root of the zone's filesystem. Must be a fully qualified file
name. If you include '%s' in the path, then it will be replaced
with the zone's name. At this point, you cannot use Puppet to move
a zone.

#### pool

The resource pool for this zone.

#### provider

The specific backend for provider to use. You will seldom need to
specify this -- Puppet will usually discover the appropriate
provider for your platform. Available providers are:

-   **solaris**: Provider for Solaris Zones. Required binaries:
    `/usr/sbin/zoneadm`, `/usr/sbin/zonecfg`. Default for
    `operatingsystem` == `solaris`.

#### realhostname

The actual hostname of the zone.

#### shares

Number of FSS CPU shares allocated to the zone.

#### sysidcfg

The text to go into the sysidcfg file when the zone is first
booted. The best way is to use a template:

    # $templatedir/sysidcfg
    system_locale=en_US
    timezone=GMT
    terminal=xterms
    security_policy=NONE
    root_password=&lt;%= password %>
    timeserver=localhost
    name_service=DNS {domain_name=&lt;%= domain %>
            name_server=&lt;%= nameserver %>}
    network_interface=primary {hostname=&lt;%= realhostname %>
            ip_address=&lt;%= ip %>
            netmask=&lt;%= netmask %>
            protocol_ipv6=no
            default_route=&lt;%= defaultroute %>}
    nfs4_domain=dynamic

And then call that:

    zone { myzone:
        ip => "bge0:192.168.0.23",
        sysidcfg => template(sysidcfg),
        path => "/opt/zones/myzone",
        realhostname => "fully.qualified.domain.name"
    }

The sysidcfg only matters on the first booting of the zone, so
Puppet only checks for it at that time.


* * * * *

